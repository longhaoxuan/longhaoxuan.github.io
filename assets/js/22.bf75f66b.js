(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{367:function(r,a,t){"use strict";t.r(a);var e=t(42),s=Object(e.a)({},(function(){var r=this,a=r.$createElement,t=r._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[t("h1",{attrs:{id:"算法基础概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#算法基础概念"}},[r._v("#")]),r._v(" 算法基础概念")]),r._v(" "),t("h2",{attrs:{id:"算法衡量标准"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#算法衡量标准"}},[r._v("#")]),r._v(" 算法衡量标准")]),r._v(" "),t("h3",{attrs:{id:"时间复杂度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#时间复杂度"}},[r._v("#")]),r._v(" 时间复杂度")]),r._v(" "),t("blockquote",[t("p",[r._v("基本执行次数统计")])]),r._v(" "),t("p",[r._v("1、线性")]),r._v(" "),t("p",[r._v("2、对数")]),r._v(" "),t("p",[r._v("3、常量")]),r._v(" "),t("p",[r._v("4、多项式")]),r._v(" "),t("p",[r._v("渐进式时间复杂度")]),r._v(" "),t("blockquote",[t("p",[r._v("保留高阶项\n省去系数")])]),r._v(" "),t("h3",{attrs:{id:"空间法复杂度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#空间法复杂度"}},[r._v("#")]),r._v(" 空间法复杂度")]),r._v(" "),t("blockquote",[t("p",[r._v("临时占用存储空间的大小")])]),r._v(" "),t("p",[r._v("1、常量空间")]),r._v(" "),t("p",[r._v("2、线性空间【数组】")]),r._v(" "),t("p",[r._v("3、二维空间【二维数组】")]),r._v(" "),t("p",[r._v("4、递归空间【递归深度】")]),r._v(" "),t("h3",{attrs:{id:"应用场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#应用场景"}},[r._v("#")]),r._v(" 应用场景")]),r._v(" "),t("p",[r._v("1、运算")]),r._v(" "),t("p",[r._v("2、查找")]),r._v(" "),t("p",[r._v("3、排序")]),r._v(" "),t("p",[r._v("4、最优决策")]),r._v(" "),t("p",[r._v("5、面试")]),r._v(" "),t("h2",{attrs:{id:"数据结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据结构"}},[r._v("#")]),r._v(" 数据结构")]),r._v(" "),t("blockquote",[t("p",[r._v("数据结构是数据的组织、管理和存储格式")])]),r._v(" "),t("h3",{attrs:{id:"线性结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#线性结构"}},[r._v("#")]),r._v(" 线性结构")]),r._v(" "),t("p",[r._v("1、数组")]),r._v(" "),t("p",[r._v("2、链表")]),r._v(" "),t("p",[r._v("衍生")]),r._v(" "),t("p",[r._v("3、栈")]),r._v(" "),t("p",[r._v("4、队列")]),r._v(" "),t("p",[r._v("5、哈希表")]),r._v(" "),t("h3",{attrs:{id:"树"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#树"}},[r._v("#")]),r._v(" 树")]),r._v(" "),t("p",[r._v("二叉树")]),r._v(" "),t("p",[r._v("二叉堆")]),r._v(" "),t("h3",{attrs:{id:"图"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#图"}},[r._v("#")]),r._v(" 图")]),r._v(" "),t("h3",{attrs:{id:"其它"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#其它"}},[r._v("#")]),r._v(" 其它")]),r._v(" "),t("p",[r._v("跳表")]),r._v(" "),t("p",[r._v("哈希链表")]),r._v(" "),t("p",[r._v("位图")]),r._v(" "),t("h1",{attrs:{id:"数据结构-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据结构-2"}},[r._v("#")]),r._v(" 数据结构")]),r._v(" "),t("h2",{attrs:{id:"线性结构-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#线性结构-2"}},[r._v("#")]),r._v(" 线性结构")]),r._v(" "),t("h3",{attrs:{id:"数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[r._v("#")]),r._v(" 数组")]),r._v(" "),t("p",[r._v("适合读多写少的场景")]),r._v(" "),t("p",[r._v("正常数组")]),r._v(" "),t("blockquote",[t("p",[r._v("有限个"),t("strong",[r._v("相同类型")]),r._v("变量组成的有序集")])]),r._v(" "),t("p",[r._v("内存中顺序存储，可实现逻辑上顺序列表 （查找只需要计算位置便可轻松得到）")]),r._v(" "),t("p",[r._v("js")]),r._v(" "),t("blockquote",[t("p",[r._v("js内存"),t("strong",[r._v("任何类型")]),r._v("的且大小可动态调整")])]),r._v(" "),t("p",[r._v("js的数组是依靠链表（或字典）实现的，"),t("strong",[r._v("存储在堆中")]),r._v("，所以底层查找的时候需要从数组第一位开始遍历查找")]),r._v(" "),t("p",[r._v("最新的js，会为同种数据类型的数组分配连续空间了。")]),r._v(" "),t("p",[t("strong",[r._v("所以JS写代码的时候尽量保证数组内数据类型相同。")])]),r._v(" "),t("p",[r._v("ArrayBuffer 存储在栈内 不可操作，只能通过 类型数组 Int8Array， 或dataview操作")]),r._v(" "),t("p",[r._v("基础操作")]),r._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[r._v("//创建数组\narr1=[]  //字面量\narr= Array（）\n// 查\narr[3]\n// 改\narr[3] = a\n// 插入\n \njs的数组的length不是只读的\n")])]),r._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[r._v("1")]),t("br"),t("span",{staticClass:"line-number"},[r._v("2")]),t("br"),t("span",{staticClass:"line-number"},[r._v("3")]),t("br"),t("span",{staticClass:"line-number"},[r._v("4")]),t("br"),t("span",{staticClass:"line-number"},[r._v("5")]),t("br"),t("span",{staticClass:"line-number"},[r._v("6")]),t("br"),t("span",{staticClass:"line-number"},[r._v("7")]),t("br"),t("span",{staticClass:"line-number"},[r._v("8")]),t("br"),t("span",{staticClass:"line-number"},[r._v("9")]),t("br"),t("span",{staticClass:"line-number"},[r._v("10")]),t("br")])]),t("h1",{attrs:{id:""}},[t("a",{staticClass:"header-anchor",attrs:{href:"#"}},[r._v("#")])]),r._v(" "),t("h1",{attrs:{id:"二叉树-tree"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二叉树-tree"}},[r._v("#")]),r._v(" 二叉树（TREE)")]),r._v(" "),t("h2",{attrs:{id:"遍历"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#遍历"}},[r._v("#")]),r._v(" 遍历")]),r._v(" "),t("p",[r._v("深度优先DFS")]),r._v(" "),t("blockquote",[t("p",[r._v("前"),t("a",{attrs:{href:"https://leetcode.com/explore/learn/card/data-structure-tree/134/traverse-a-tree/992/#pre-order-traversal",target:"_blank",rel:"noopener noreferrer"}},[r._v("Pre-order Traversal"),t("OutboundLink")],1),r._v("\n中"),t("a",{attrs:{href:"https://leetcode.com/explore/learn/card/data-structure-tree/134/traverse-a-tree/992/#in-order-traversal",target:"_blank",rel:"noopener noreferrer"}},[r._v("In-order Traversal"),t("OutboundLink")],1),r._v("\n后"),t("a",{attrs:{href:"https://leetcode.com/explore/learn/card/data-structure-tree/134/traverse-a-tree/992/#post-order-traversal",target:"_blank",rel:"noopener noreferrer"}},[r._v("Post-order Traversal"),t("OutboundLink")],1)])]),r._v(" "),t("p",[r._v("广度优先BFS")]),r._v(" "),t("blockquote",[t("p",[r._v("层次遍历")])]),r._v(" "),t("h3",{attrs:{id:"pro-order"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#pro-order"}},[r._v("#")]),r._v(" Pro-order")])])}),[],!1,null,null,null);a.default=s.exports}}]);