(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{377:function(t,i,v){"use strict";v.r(i);var _=v(42),a=Object(_.a)({},(function(){var t=this,i=t.$createElement,v=t._self._c||i;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"git总揽"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git总揽"}},[t._v("#")]),t._v(" Git总揽")]),t._v(" "),v("h2",{attrs:{id:"安装配置"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#安装配置"}},[t._v("#")]),t._v(" 安装配置")]),t._v(" "),v("p",[v("RouterLink",{attrs:{to:"/blog/运维相关/git安装配置.html"}},[t._v("安装配置")])],1),t._v(" "),v("h2",{attrs:{id:"代码仓库"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#代码仓库"}},[t._v("#")]),t._v(" 代码仓库")]),t._v(" "),v("h3",{attrs:{id:"创建代码"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#创建代码"}},[t._v("#")]),t._v(" 创建代码")]),t._v(" "),v("ol",[v("li",[t._v("进入需要创建代码仓库的文件夹 'cd 文件路径'")]),t._v(" "),v("li",[t._v("创建/初始化仓库 "),v("code",[t._v("git init")])]),t._v(" "),v("li",[t._v("拉去远程仓库到本地 "),v("code",[t._v("git clone [gitlink]")])])]),t._v(" "),v("h3",{attrs:{id:"添加文件到仓库"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#添加文件到仓库"}},[t._v("#")]),t._v(" 添加文件到仓库")]),t._v(" "),v("ol",[v("li",[v("p",[t._v("添加文件到暂存区")]),t._v(" "),v("ol",[v("li",[t._v("添加单个文件 "),v("code",[t._v("git add [filepath]")])]),t._v(" "),v("li",[t._v("忽略的文件\n"),v("ul",[v("li",[t._v(".gittignore中指定的文件会被忽略")]),t._v(" "),v("li",[t._v("空目录")])])])])]),t._v(" "),v("li",[v("p",[t._v("提交到本地仓库")]),t._v(" "),v("ul",[v("li",[v("code",[t._v("git commit")])]),t._v(" "),v("li",[t._v("填写commit message保存,规范TODO")])])]),t._v(" "),v("li",[v("p",[t._v("查看工作状态"),v("code",[t._v("git status")])])]),t._v(" "),v("li",[v("p",[t._v("对比工作区文件变化"),v("code",[t._v("git diff")])])])]),t._v(" "),v("h3",{attrs:{id:"仓库配置"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#仓库配置"}},[t._v("#")]),t._v(" 仓库配置")]),t._v(" "),v("ol",[v("li",[v("p",[t._v("配置全局用户名和邮箱")]),t._v(" "),v("ul",[v("li",[v("code",[t._v('git config --global user.name "[name]"')])]),t._v(" "),v("li",[v("code",[t._v('git config --global user.email "[email address]"')])])])]),t._v(" "),v("li",[v("p",[t._v("配置当前仓库用户名和邮箱")]),t._v(" "),v("ul",[v("li",[v("code",[t._v('git config user.name "[name]"')])]),t._v(" "),v("li",[v("code",[t._v('git config user.email "[email address]"')])])])])]),t._v(" "),v("h2",{attrs:{id:"代码版本-提交切换"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#代码版本-提交切换"}},[t._v("#")]),t._v(" 代码版本/提交切换")]),t._v(" "),v("h3",{attrs:{id:"查看过去版本-提交"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#查看过去版本-提交"}},[t._v("#")]),t._v(" 查看过去版本/提交")]),t._v(" "),v("ol",[v("li",[t._v("提交详情"),v("code",[t._v("git log")])]),t._v(" "),v("li",[t._v("提交简介"),v("code",[t._v("git log --pretty=oneline")])])]),t._v(" "),v("h3",{attrs:{id:"退回版本-提交"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#退回版本-提交"}},[t._v("#")]),t._v(" 退回版本/提交")]),t._v(" "),v("ol",[v("li",[t._v("回到当前最新提交 "),v("code",[t._v("git reset -- hard HEAD")])]),t._v(" "),v("li",[t._v("回到上次提交 "),v("code",[t._v("git reset -- hard HEAD^")])]),t._v(" "),v("li",[t._v("退回到上n次提交 "),v("code",[t._v("git reset -- hard HEAD-n")])]),t._v(" "),v("li",[t._v("退回到某次提交 "),v("code",[t._v("git reset --hard [commitid]")])])]),t._v(" "),v("h3",{attrs:{id:"重返未来版本"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#重返未来版本"}},[t._v("#")]),t._v(" 重返未来版本")]),t._v(" "),v("ol",[v("li",[v("p",[t._v("查看历史提交以及被退回的提交"),v("code",[t._v("git reflog")])]),t._v(" "),v("p",[t._v("注意：该记录有时限，且只在本地")])]),t._v(" "),v("li",[v("p",[t._v("回到未来版本 "),v("code",[t._v("git reset --hard commitid")])])])]),t._v(" "),v("h3",{attrs:{id:"撤销修改"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#撤销修改"}},[t._v("#")]),t._v(" 撤销修改")]),t._v(" "),v("ol",[v("li",[t._v("工作去文件撤销,没有提交到暂存区/没有git add\n"),v("ul",[v("li",[t._v("撤销修改"),v("code",[t._v("git checkout [filepath]")])])])]),t._v(" "),v("li",[t._v("暂存区文件撤销\n"),v("ol",[v("li",[t._v("将暂存区文件撤销到工作区 "),v("code",[t._v("git reset HEAD [falepath]")]),t._v(" 不带--hard")]),t._v(" "),v("li",[t._v("撤销修改"),v("code",[t._v("git checkout [filepath]")])])])]),t._v(" "),v("li",[t._v("提交到了版本库\n"),v("ul",[v("li",[t._v("参见回退版本/提交")])])])]),t._v(" "),v("h3",{attrs:{id:"文件删除"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#文件删除"}},[t._v("#")]),t._v(" 文件删除")]),t._v(" "),v("ol",[v("li",[t._v("删除文件 从版本库中删除\n"),v("ol",[v("li",[v("code",[t._v("git rm [filepath]")])]),t._v(" "),v("li",[t._v("修改后需要提交")])])]),t._v(" "),v("li",[t._v("恢复删除\n"),v("ul",[v("li",[t._v("参考撤销修改")])])]),t._v(" "),v("li",[t._v("从版本库中删除文件，但是本地不删除该文件 "),v("code",[t._v("git rm --cached")])])]),t._v(" "),v("h3",{attrs:{id:"暂存修改"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#暂存修改"}},[t._v("#")]),t._v(" 暂存修改")]),t._v(" "),v("ul",[v("li",[t._v("参照分支-暂存修改")])]),t._v(" "),v("h3",{attrs:{id:"忽略文件"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#忽略文件"}},[t._v("#")]),t._v(" 忽略文件")]),t._v(" "),v("ul",[v("li",[t._v("通过git仓库下的.gitignore文件屏蔽某些中间文件/生成文件")])]),t._v(" "),v("h3",{attrs:{id:"注意-这里的版本均为本地仓库版本"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#注意-这里的版本均为本地仓库版本"}},[t._v("#")]),t._v(" 注意：这里的版本均为本地仓库版本")]),t._v(" "),v("h2",{attrs:{id:"分支"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#分支"}},[t._v("#")]),t._v(" 分支")]),t._v(" "),v("h3",{attrs:{id:"创建与合并分支"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#创建与合并分支"}},[t._v("#")]),t._v(" 创建与合并分支")]),t._v(" "),v("ol",[v("li",[t._v("创建分支\n"),v("ul",[v("li",[t._v("仅创建"),v("code",[t._v("git branch 分支名")])]),t._v(" "),v("li",[t._v("创建并切换 "),v("code",[t._v("git checkout -b 分支名")])]),t._v(" "),v("li",[t._v("注意：在本地仓库才做，创建的都是本地分支")])])]),t._v(" "),v("li",[t._v("切换分支 "),v("code",[t._v("git checkout 分支名")])]),t._v(" "),v("li",[t._v("合并分支\n"),v("ul",[v("li",[v("code",[t._v("git merge 合并某分支到当前分支")])]),t._v(" "),v("li",[v("code",[t._v("git rebase")]),t._v(" 若无特殊需要不建议使用")])])]),t._v(" "),v("li",[t._v("删除分支\n"),v("ol",[v("li",[t._v("删除本地分支\n"),v("ul",[v("li",[t._v("删除未合并分支 "),v("code",[t._v("git branch -D 分支名")])]),t._v(" "),v("li",[t._v("删除已合并分支 "),v("code",[t._v("git branch -d 分支名")])])])]),t._v(" "),v("li",[t._v("删除远程分支\n"),v("ul",[v("li",[t._v("删除远程分支\n"),v("ol",[v("li",[v("code",[t._v("git push origin -d 分支名")])]),t._v(" "),v("li",[v("code",[t._v("git push <远程仓库名>/分支名")])]),t._v(" "),v("li",[t._v("建议界面操作")])])])])])])]),t._v(" "),v("li",[t._v("查看分支\n"),v("ol",[v("li",[t._v("查看当前分支 "),v("code",[t._v("git branch")])]),t._v(" "),v("li",[t._v("查看所有分支信息 "),v("code",[t._v("git branch -a")])])])]),t._v(" "),v("li",[t._v("合并分支，解决分支冲突\n"),v("ul",[v("li",[t._v("将要合并的分支更新到最新")]),t._v(" "),v("li",[t._v("切换到主分支")]),t._v(" "),v("li",[t._v("合并分支")]),t._v(" "),v("li",[t._v("解决合并时的conflict")]),t._v(" "),v("li",[t._v("提交到版本库")]),t._v(" "),v("li",[t._v("合并成功")]),t._v(" "),v("li",[t._v("查看分支状态\n"),v("ul",[v("li",[v("code",[t._v("git log --graph")])]),t._v(" "),v("li",[v("code",[t._v("git log --graph --pretty=oneline --abbrey-commit")])])])])])]),t._v(" "),v("li",[t._v("开发完需要提交PR/MR\n"),v("ul",[v("li",[t._v("通过PR/MR来合并开发分支与主分支")])])])]),t._v(" "),v("h3",{attrs:{id:"分支暂存修改"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#分支暂存修改"}},[t._v("#")]),t._v(" 分支暂存修改")]),t._v(" "),v("ul",[v("li",[t._v("暂存工作现场 "),v("code",[t._v("git stash apply")])]),t._v(" "),v("li",[t._v("恢复工作现场\n"),v("ul",[v("li",[t._v("恢复 "),v("code",[t._v("git stash apply")])]),t._v(" "),v("li",[t._v("删除 "),v("code",[t._v("git stash drop")])]),t._v(" "),v("li",[t._v("恢复 + 删除 "),v("code",[t._v("git stash pop")])])])])]),t._v(" "),v("h3",{attrs:{id:"多人协作"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#多人协作"}},[t._v("#")]),t._v(" 多人协作")]),t._v(" "),v("ol",[v("li",[t._v("查看远程库信息\n"),v("ul",[v("li",[t._v("详细 "),v("code",[t._v("git remote -v")])]),t._v(" "),v("li",[t._v("不详细 "),v("code",[t._v("git remote")])])])]),t._v(" "),v("li",[t._v("更新/推送远程库\n"),v("ol",[v("li",[t._v("更新远程库信息 "),v("code",[t._v("git fetch")])]),t._v(" "),v("li",[t._v("将远程库最新修改更新到本地\n"),v("ul",[v("li",[v("code",[t._v("git pull")])]),t._v(" "),v("li",[t._v("git pull 可以认为是 git fetch+git merge")])])]),t._v(" "),v("li",[t._v("将本地修改推送到远程库\n"),v("ul",[v("li",[v("code",[t._v("git push")])]),t._v(" "),v("li",[t._v("git push origin 分支名")])])])])]),t._v(" "),v("li",[t._v("本地分支与远程分支交互\n"),v("ol",[v("li",[t._v("使用远程分支A创建本地分支\n"),v("ul",[v("li",[v("code",[t._v("git checkout -b A origin/A")])]),t._v(" "),v("li",[t._v("origin是远程仓库名，若名字一样origin/A可以省略")])])]),t._v(" "),v("li",[t._v("将本地分支与远程分支作关联\n"),v("ul",[v("li",[v("code",[t._v("git branch --set-upstream A origin/A")])]),t._v(" "),v("li",[t._v("提示no tracking information错误")])])])])])]),t._v(" "),v("h3",{attrs:{id:"建议开发遵循或者参照git标准工作流-比如git-flow、github-flow或者gitlab-flow"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#建议开发遵循或者参照git标准工作流-比如git-flow、github-flow或者gitlab-flow"}},[t._v("#")]),t._v(" 建议开发遵循或者参照git标准工作流，比如git flow、github flow或者gitlab flow")]),t._v(" "),v("h2",{attrs:{id:"代码版本tag"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#代码版本tag"}},[t._v("#")]),t._v(" 代码版本tag")]),t._v(" "),v("h3",{attrs:{id:"查看tag"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#查看tag"}},[t._v("#")]),t._v(" 查看tag")]),t._v(" "),v("ul",[v("li",[t._v("本地tag "),v("code",[t._v("git tag")])]),t._v(" "),v("li",[t._v("远程 "),v("code",[t._v("git tag -r")])])]),t._v(" "),v("h3",{attrs:{id:"操作tag"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#操作tag"}},[t._v("#")]),t._v(" 操作tag")]),t._v(" "),v("ul",[v("li",[t._v("添加tag\n"),v("ul",[v("li",[t._v("给当前版本添加tag\n"),v("ul",[v("li",[t._v("git tag 标签名")])])]),t._v(" "),v("li",[t._v("给历史版本添加tag\n"),v("ul",[v("li",[t._v("git tag 标签名 commitid")])])])])]),t._v(" "),v("li",[t._v("删除tag\n"),v("ul",[v("li",[t._v("删除本地标签 "),v("code",[t._v("git tag -d 标签名")])]),t._v(" "),v("li",[t._v("删除远程标签 "),v("code",[t._v("git push origin -d 标签名")])])])]),t._v(" "),v("li",[t._v("推送到远端仓库\n"),v("ul",[v("li",[v("code",[t._v("git push origin 标签名")])]),t._v(" "),v("li",[t._v("推送所有未提交的tag\n"),v("ul",[v("li",[v("code",[t._v("git push origin --tags")])])])])])]),t._v(" "),v("li",[t._v("更新到本地 "),v("code",[t._v("git pull origin --tags")])])]),t._v(" "),v("h3",{attrs:{id:"tag与branch的操作基本一致-tag是一个仅可读的branch"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tag与branch的操作基本一致-tag是一个仅可读的branch"}},[t._v("#")]),t._v(" tag与branch的操作基本一致，tag是一个仅可读的branch")]),t._v(" "),v("h2",{attrs:{id:"其他生僻命令"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#其他生僻命令"}},[t._v("#")]),t._v(" 其他生僻命令")]),t._v(" "),v("ul",[v("li",[t._v("git blame")]),t._v(" "),v("li",[t._v("git bisect 过第二分支查找定位引入bug的变更")]),t._v(" "),v("li",[t._v("git relog")]),t._v(" "),v("li",[t._v("可以使用git help或者查看git常用的命令，使用git help -a查看git可用的所有命令")])]),t._v(" "),v("p",[v("a",{attrs:{href:"/blog/git图谱.html"}},[t._v("网络加载图 ")])]),t._v(" "),v("p",[v("RouterLink",{attrs:{to:"/blog/git图谱.html"}},[t._v("网络加载图")])],1),t._v(" "),v("h2",{attrs:{id:"工作流"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#工作流"}},[t._v("#")]),t._v(" 工作流")]),t._v(" "),v("ol",[v("li",[t._v("git clone // 到本地")]),t._v(" "),v("li",[t._v("git checkout -b xxx 切换至新分支xxx\n（相当于复制了remote的仓库到本地的xxx分支上")]),t._v(" "),v("li",[t._v("修改或者添加本地代码（部署在硬盘的源文件上）")]),t._v(" "),v("li",[t._v("git diff 查看自己对代码做出的改变")]),t._v(" "),v("li",[t._v("git add 上传更新后的代码至暂存区")]),t._v(" "),v("li",[t._v("git commit 可以将暂存区里更新后的代码更新到本地git")]),t._v(" "),v("li",[t._v("git push origin xxx 将本地的xxxgit分支上传至github上的git")])]),t._v(" "),v("hr"),t._v(" "),v("p",[t._v("（如果在写自己的代码过程中发现远端GitHub上代码出现改变）")]),t._v(" "),v("ol",[v("li",[t._v("git checkout main 切换回main分支")]),t._v(" "),v("li",[t._v("git pull origin master(main) 将远端修改过的代码再更新到本地")]),t._v(" "),v("li",[t._v("git checkout xxx 回到xxx分支")]),t._v(" "),v("li",[t._v("git rebase main 我在xxx分支上，先把main移过来，然后根据我的commit来修改成新的内容\n（中途可能会出现，rebase conflict -----》手动选择保留哪段代码）")]),t._v(" "),v("li",[t._v("git push -f origin xxx 把rebase后并且更新过的代码再push到远端github上（-f ---》强行）")]),t._v(" "),v("li",[t._v("原项目主人采用pull request 中的 squash and merge 合并所有不同的commit")])]),t._v(" "),v("hr"),t._v(" "),v("p",[t._v("远端完成更新后")]),t._v(" "),v("ol",[v("li",[t._v("git branch -d xxx 删除本地的git分支")]),t._v(" "),v("li",[t._v("git pull origin master 再把远端的最新代码拉至本地")])])])}),[],!1,null,null,null);i.default=a.exports}}]);